class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        n = len(graph)
        initial.sort()

        m = sys.maxint
        result = None

        for mal in initial:
            dict1 = {}
            for i in range(n):
                if i == mal:
                    continue
                if i not in dict1:
                    dict1[i] = (i, 1)

                for j in range(n):
                    if j == mal:
                        continue
                    if i != j and graph[i][j] == 1:
                        if j not in dict1:
                            dict1[j] = (j, 1)

                        i_root, _ = find(i, dict1)
                        j_root, _ = find(j, dict1)
                        if i_root != j_root:
                            union(i, j, dict1)

            max_rank = 0
            visited = set()
            for keep in initial:
                if keep != mal:
                    root, rank = find(keep, dict1)
                    if root not in visited:
                        max_rank += rank
                    visited.add(root)

            if max_rank < m:
                result = mal
                m = max_rank

        return result


def find(x, graph):
    p, rank = graph[x]

    while p != graph[p][0]:
        p = graph[p][0]

    graph[x] = graph[p]

    return graph[p]


def union(x, y, graph):
    x_root, x_rank = find(x, graph)
    y_root, y_rank = find(y, graph)

    if x_rank < y_rank:
        root = x_root
    else:
        root = y_root

    graph[x_root] = root, x_rank + y_rank
    graph[y_root] = root, x_rank + y_rank